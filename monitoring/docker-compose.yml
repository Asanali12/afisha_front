version: '3.7'

networks:
  monitoring.network:
    ipam:
      driver: default

services:
  pprometheus:
    image: prom/prometheus #:${PROMETHEUS_VERSION}
    container_name: monitoring.prometheus1
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=14d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
      - '--storage.tsdb.max-block-duration=4h'
      - '--storage.tsdb.wal-segment-size=60MB'
      - '--storage.tsdb.allow-overlapping-blocks'
      - '--query.max-samples=5000000'
    restart: unless-stopped
    expose:
      - 9090
    ports:
      - "9090:9090"
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        tag: "{{.ImageName}}|{{.Name}}"

  app:
    image: urbeingwatched8/afisha:latest
    container_name: my.app1
    ports:
      - "8080:8080"
    #restart: unless-stopped
    networks:
      - monitoring.network
    logging:
      driver: "json-file"
      options:
        tag: "{{ .ImageName }}|{{ .Name }}"

  grafana:
    image: grafana/grafana #:${GRAFANA_TAG}
    container_name: monitoring.grafana1
 
    expose:
      - 3000
    ports:
      - "3000:3000"
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"
  
  promtail:
    image: grafana/promtail #:${PROMTAIL_TAG}
    container_name: monitoring.promtail1
    expose:
      - 9080
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers
      - ./promtail.yml:/etc/promtail/promtail.yml

    command: -config.file=/etc/promtail/promtail.yml
    restart: unless-stopped
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"
  
  loki:
    image: grafana/loki #:${LOKI_TAG}
    container_name: monitoring.loki1
    expose:
      - 3100
    ports:
      - "3100:3100"
    volumes:
      - ./loki.yml:/etc/loki/loki.yml

    command: -config.file=/etc/loki/loki.yml
    restart: unless-stopped
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"
      
volumes:
  prometheus-data: {}
  grafana-data: {}
  loki-data: {}
  promtail-data: {}
